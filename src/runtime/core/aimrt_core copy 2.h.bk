#pragma once

#include <memory>
#include <string>
#include <string_view>
#include <unordered_map>
#include <vector>
#include <atomic>
#include "core/manager/manager_base.h"
#include "util/log_util.h"

namespace aimrt::runtime::core {

/**
 * @brief AimRT核心类，负责管理整个运行时的生命周期
 */
class AimRTCore {
 public:
  /**
   * @brief 配置选项结构体
   */
  struct Options {
    std::string cfg_file_path;        ///< 配置文件路径
    std::vector<std::string> enabled_managers;  ///< 启用的管理器列表
  };

  /**
   * @brief 构造函数
   * @param options 配置选项
   */
  explicit AimRTCore(Options options = {});
  
  /**
   * @brief 析构函数，确保资源正确释放
   */
  ~AimRTCore();

  // 禁止拷贝和移动操作，确保单一实例
  AimRTCore(const AimRTCore&) = delete;
  AimRTCore& operator=(const AimRTCore&) = delete;
  AimRTCore(AimRTCore&&) = delete;
  AimRTCore& operator=(AimRTCore&&) = delete;

  /**
   * @brief 初始化核心组件
   * 加载配置，创建并初始化所有管理器
   */
  void Initialize();

  /**
   * @brief 启动所有管理器
   * 确保所有管理器正常运行
   */
  void Start();

  /**
   * @brief 停止所有管理器
   * 确保资源正确释放
   */
  void Stop();

  /**
   * @brief 获取指定类型的管理器
   * @param name 管理器名称
   * @return 指定类型的管理器指针，如果不存在则返回nullptr
   */
  template<typename T>
  std::shared_ptr<T> GetManager(std::string_view name) const {
    auto it = managers_.find(std::string(name));
    if (it != managers_.end()) {
      return std::dynamic_pointer_cast<T>(it->second);
    }
    return nullptr;
  }

  /**
   * @brief 检查所有管理器的健康状态
   * @return 如果所有管理器都健康则返回true
   */
  bool IsHealthy() const;

 private:
  /**
   * @brief 从配置文件加载配置
   */
  void LoadConfig();

  /**
   * @brief 创建所有启用的管理器
   */
  void CreateManagers();

  /**
   * @brief 初始化所有管理器
   */
  void InitializeManagers();

  /**
   * @brief 启动所有管理器
   */
  void StartManagers();

  /**
   * @brief 停止所有管理器
   */
  void StopManagers();
  
  Options options_;  ///< 配置选项
  std::unordered_map<std::string, ManagerPtr> managers_;  ///< 管理器映射表
  std::shared_ptr<common::util::LoggerWrapper> logger_;   ///< 日志记录器
  std::atomic<bool> initialized_{false};  ///< 初始化状态标志
  std::atomic<bool> running_{false};      ///< 运行状态标志
};

}  // namespace aimrt::runtime::core
